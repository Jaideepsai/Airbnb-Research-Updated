{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test text:\n",
      "\"Attic room with doublebed available\"\n",
      "\n",
      "ARI:  10.272\n",
      "FleschReadingEase:  15.64\n",
      "FleschKincaidGradeLevel:  12.32\n",
      "GunningFogIndex:  18.0\n",
      "SMOGIndex:  10.7459666924\n",
      "ColemanLiauIndex:  14.718\n",
      "LIX:  45.0\n",
      "RIX:  2.0\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "\n",
    "import math\n",
    "\n",
    "from utils import get_char_count\n",
    "from utils import get_words\n",
    "from utils import get_sentences\n",
    "from utils import count_syllables\n",
    "from utils import count_complex_words\n",
    "\n",
    "\n",
    "class Readability:\n",
    "    analyzedVars = {}\n",
    "\n",
    "    def __init__(self, text):\n",
    "        self.analyze_text(text)\n",
    "\n",
    "    def analyze_text(self, text):\n",
    "        words = get_words(text)\n",
    "        char_count = get_char_count(words)\n",
    "        word_count = len(words)\n",
    "        sentence_count = len(get_sentences(text))\n",
    "        syllable_count = count_syllables(words)\n",
    "        complexwords_count = count_complex_words(text)\n",
    "        avg_words_p_sentence = word_count/sentence_count\n",
    "        \n",
    "        self.analyzedVars = {\n",
    "            'words': words,\n",
    "            'char_cnt': float(char_count),\n",
    "            'word_cnt': float(word_count),\n",
    "            'sentence_cnt': float(sentence_count),\n",
    "            'syllable_cnt': float(syllable_count),\n",
    "            'complex_word_cnt': float(complexwords_count),\n",
    "            'avg_words_p_sentence': float(avg_words_p_sentence)\n",
    "        }\n",
    "\n",
    "    def ARI(self):\n",
    "        score = 0.0 \n",
    "        if self.analyzedVars['word_cnt'] > 0.0:\n",
    "            score = 4.71 * (self.analyzedVars['char_cnt'] / self.analyzedVars['word_cnt']) + 0.5 * (self.analyzedVars['word_cnt'] / self.analyzedVars['sentence_cnt']) - 21.43\n",
    "        return score\n",
    "        \n",
    "    def FleschReadingEase(self):\n",
    "        score = 0.0 \n",
    "        if self.analyzedVars['word_cnt'] > 0.0:\n",
    "            score = 206.835 - (1.015 * (self.analyzedVars['avg_words_p_sentence'])) - (84.6 * (self.analyzedVars['syllable_cnt']/ self.analyzedVars['word_cnt']))\n",
    "        return round(score, 4)\n",
    "        \n",
    "    def FleschKincaidGradeLevel(self):\n",
    "        score = 0.0 \n",
    "        if self.analyzedVars['word_cnt'] > 0.0:\n",
    "            score = 0.39 * (self.analyzedVars['avg_words_p_sentence']) + 11.8 * (self.analyzedVars['syllable_cnt']/ self.analyzedVars['word_cnt']) - 15.59\n",
    "        return round(score, 4)\n",
    "        \n",
    "    def GunningFogIndex(self):\n",
    "        score = 0.0 \n",
    "        if self.analyzedVars['word_cnt'] > 0.0:\n",
    "            score = 0.4 * ((self.analyzedVars['avg_words_p_sentence']) + (100 * (self.analyzedVars['complex_word_cnt']/self.analyzedVars['word_cnt'])))\n",
    "        return round(score, 4)\n",
    "\n",
    "    def SMOGIndex(self):\n",
    "        score = 0.0 \n",
    "        if self.analyzedVars['word_cnt'] > 0.0:\n",
    "            score = (math.sqrt(self.analyzedVars['complex_word_cnt']*(30/self.analyzedVars['sentence_cnt'])) + 3)\n",
    "        return score\n",
    "\n",
    "    def ColemanLiauIndex(self):\n",
    "        score = 0.0 \n",
    "        if self.analyzedVars['word_cnt'] > 0.0:\n",
    "            score = (5.89*(self.analyzedVars['char_cnt']/self.analyzedVars['word_cnt']))-(30*(self.analyzedVars['sentence_cnt']/self.analyzedVars['word_cnt']))-15.8\n",
    "        return round(score, 4)\n",
    "\n",
    "    def LIX(self):\n",
    "        longwords = 0.0\n",
    "        score = 0.0 \n",
    "        if self.analyzedVars['word_cnt'] > 0.0:\n",
    "            for word in self.analyzedVars['words']:\n",
    "                if len(word) >= 7:\n",
    "                    longwords += 1.0\n",
    "            score = self.analyzedVars['word_cnt'] / self.analyzedVars['sentence_cnt'] + float(100 * longwords) / self.analyzedVars['word_cnt']\n",
    "        return score\n",
    "\n",
    "    def RIX(self):\n",
    "        longwords = 0.0\n",
    "        score = 0.0 \n",
    "        if self.analyzedVars['word_cnt'] > 0.0:\n",
    "            for word in self.analyzedVars['words']:\n",
    "                if len(word) >= 7:\n",
    "                    longwords += 1.0\n",
    "            score = longwords / self.analyzedVars['sentence_cnt']\n",
    "        return score\n",
    "        \n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    text = \"\"\"Attic room with doublebed available\"\"\"\n",
    "\n",
    "    rd = Readability(text)\n",
    "    print 'Test text:'\n",
    "    print '\"%s\"\\n' % text\n",
    "    print 'ARI: ', rd.ARI()\n",
    "    print 'FleschReadingEase: ', rd.FleschReadingEase()\n",
    "    print 'FleschKincaidGradeLevel: ', rd.FleschKincaidGradeLevel()\n",
    "    print 'GunningFogIndex: ', rd.GunningFogIndex()\n",
    "    print 'SMOGIndex: ', rd.SMOGIndex()\n",
    "    print 'ColemanLiauIndex: ', rd.ColemanLiauIndex()\n",
    "    print 'LIX: ', rd.LIX()\n",
    "    print 'RIX: ', rd.RIX()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  },
  "widgets": {
   "state": {},
   "version": "1.1.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
